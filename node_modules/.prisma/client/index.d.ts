
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export interface PrismaPromise<A> extends Promise<A> {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Users
 * 
 */
export type Users = {
  userId: bigint
  userName: string
  department: string
  userNick: string | null
  userEmail: string
  userPW: string
  userPhoneNum: string
  profileImagePath: string | null
  userRole: boolean
  activityNum: bigint | null
  serviceAgree: boolean
  regDate: Date
  update: Date
  pointStatus: bigint | null
}

/**
 * Model Posts
 * 
 */
export type Posts = {
  postId: bigint
  userId: bigint
  postTitle: string | null
  postContent: string
  imagePath: string | null
  publishDate: Date
  tag: string
  postViews: bigint
  postLikes: bigint
}

/**
 * Model PostInterest
 * 
 */
export type PostInterest = {
  collectId: bigint
  userId: bigint
  postId: bigint
}
/**
 * Model Activity
 * 
 */
export type Activity = {
  activityId: bigint
  userId: bigint
  activityName: string | null
  activityPeriod: string | null
  certification: boolean
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<GlobalReject>;

  /**
   * `prisma.posts`: Exposes CRUD operations for the **Posts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.posts.findMany()
    * ```
    */
  get posts(): Prisma.PostsDelegate<GlobalReject>;

  /**
<<<<<<< HEAD
   * `prisma.postInterest`: Exposes CRUD operations for the **PostInterest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PostInterests
    * const postInterests = await prisma.postInterest.findMany()
    * ```
    */
  get postInterest(): Prisma.PostInterestDelegate<GlobalReject>;
=======
   * `prisma.activity`: Exposes CRUD operations for the **Activity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Activities
    * const activities = await prisma.activity.findMany()
    * ```
    */
  get activity(): Prisma.ActivityDelegate<GlobalReject>;
>>>>>>> feature/10
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.9.0
   * Query Engine version: ceb5c99003b99c9ee2c1d2e618e359c14aef2ea5
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Users: 'Users',
    Posts: 'Posts',
<<<<<<< HEAD
    PostInterest: 'PostInterest'
=======
    Activity: 'Activity'
>>>>>>> feature/10
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    userId: number | null
    activityNum: number | null
    pointStatus: number | null
  }

  export type UsersSumAggregateOutputType = {
    userId: bigint | null
    activityNum: bigint | null
    pointStatus: bigint | null
  }

  export type UsersMinAggregateOutputType = {
    userId: bigint | null
    userName: string | null
    department: string | null
    userNick: string | null
    userEmail: string | null
    userPW: string | null
    userPhoneNum: string | null
    profileImagePath: string | null
    userRole: boolean | null
    activityNum: bigint | null
    serviceAgree: boolean | null
    regDate: Date | null
    update: Date | null
    pointStatus: bigint | null
  }

  export type UsersMaxAggregateOutputType = {
    userId: bigint | null
    userName: string | null
    department: string | null
    userNick: string | null
    userEmail: string | null
    userPW: string | null
    userPhoneNum: string | null
    profileImagePath: string | null
    userRole: boolean | null
    activityNum: bigint | null
    serviceAgree: boolean | null
    regDate: Date | null
    update: Date | null
    pointStatus: bigint | null
  }

  export type UsersCountAggregateOutputType = {
    userId: number
    userName: number
    department: number
    userNick: number
    userEmail: number
    userPW: number
    userPhoneNum: number
    profileImagePath: number
    userRole: number
    activityNum: number
    serviceAgree: number
    regDate: number
    update: number
    pointStatus: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    userId?: true
    activityNum?: true
    pointStatus?: true
  }

  export type UsersSumAggregateInputType = {
    userId?: true
    activityNum?: true
    pointStatus?: true
  }

  export type UsersMinAggregateInputType = {
    userId?: true
    userName?: true
    department?: true
    userNick?: true
    userEmail?: true
    userPW?: true
    userPhoneNum?: true
    profileImagePath?: true
    userRole?: true
    activityNum?: true
    serviceAgree?: true
    regDate?: true
    update?: true
    pointStatus?: true
  }

  export type UsersMaxAggregateInputType = {
    userId?: true
    userName?: true
    department?: true
    userNick?: true
    userEmail?: true
    userPW?: true
    userPhoneNum?: true
    profileImagePath?: true
    userRole?: true
    activityNum?: true
    serviceAgree?: true
    regDate?: true
    update?: true
    pointStatus?: true
  }

  export type UsersCountAggregateInputType = {
    userId?: true
    userName?: true
    department?: true
    userNick?: true
    userEmail?: true
    userPW?: true
    userPhoneNum?: true
    profileImagePath?: true
    userRole?: true
    activityNum?: true
    serviceAgree?: true
    regDate?: true
    update?: true
    pointStatus?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: UsersWhereInput
    orderBy?: Enumerable<UsersOrderByWithAggregationInput>
    by: UsersScalarFieldEnum[]
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    userId: bigint
    userName: string
    department: string
    userNick: string | null
    userEmail: string
    userPW: string
    userPhoneNum: string
    profileImagePath: string | null
    userRole: boolean
    activityNum: bigint | null
    serviceAgree: boolean
    regDate: Date
    update: Date
    pointStatus: bigint | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect = {
    userId?: boolean
    userName?: boolean
    department?: boolean
    userNick?: boolean
    userEmail?: boolean
    userPW?: boolean
    userPhoneNum?: boolean
    profileImagePath?: boolean
    userRole?: boolean
    activityNum?: boolean
    serviceAgree?: boolean
    regDate?: boolean
    update?: boolean
    pointStatus?: boolean
  }


  export type UsersGetPayload<S extends boolean | null | undefined | UsersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Users :
    S extends undefined ? never :
    S extends { include: any } & (UsersArgs | UsersFindManyArgs)
    ? Users 
    : S extends { select: any } & (UsersArgs | UsersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Users ? Users[P] : never
  } 
      : Users


  type UsersCountArgs = 
    Omit<UsersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UsersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Users'> extends True ? Prisma__UsersClient<UsersGetPayload<T>> : Prisma__UsersClient<UsersGetPayload<T> | null, null>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UsersFindUniqueOrThrowArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UsersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Users'> extends True ? Prisma__UsersClient<UsersGetPayload<T>> : Prisma__UsersClient<UsersGetPayload<T> | null, null>

    /**
     * Find the first Users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UsersFindFirstOrThrowArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const usersWithUserIdOnly = await prisma.users.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs>(
      args?: SelectSubset<T, UsersFindManyArgs>
    ): PrismaPromise<Array<UsersGetPayload<T>>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs>(
      args: SelectSubset<T, UsersCreateArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UsersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsersCreateManyArgs>(
      args?: SelectSubset<T, UsersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs>(
      args: SelectSubset<T, UsersDeleteArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs>(
      args: SelectSubset<T, UsersUpdateArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs>(
      args?: SelectSubset<T, UsersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs>(
      args: SelectSubset<T, UsersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs>(
      args: SelectSubset<T, UsersUpsertArgs>
    ): Prisma__UsersClient<UsersGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UsersClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Users base type for findUnique actions
   */
  export type UsersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUnique
   */
  export interface UsersFindUniqueArgs extends UsersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users base type for findFirst actions
   */
  export type UsersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UsersScalarFieldEnum>
  }

  /**
   * Users findFirst
   */
  export interface UsersFindFirstArgs extends UsersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * Users findMany
   */
  export type UsersFindManyArgs = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * Users create
   */
  export type UsersCreateArgs = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }


  /**
   * Users createMany
   */
  export type UsersCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UsersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Users update
   */
  export type UsersUpdateArgs = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }


  /**
   * Users upsert
   */
  export type UsersUpsertArgs = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }


  /**
   * Users delete
   */
  export type UsersDeleteArgs = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }


  /**
   * Users without action
   */
  export type UsersArgs = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect | null
  }



  /**
   * Model Posts
   */


  export type AggregatePosts = {
    _count: PostsCountAggregateOutputType | null
    _avg: PostsAvgAggregateOutputType | null
    _sum: PostsSumAggregateOutputType | null
    _min: PostsMinAggregateOutputType | null
    _max: PostsMaxAggregateOutputType | null
  }

  export type PostsAvgAggregateOutputType = {
    postId: number | null
    userId: number | null
    postViews: number | null
    postLikes: number | null
  }

  export type PostsSumAggregateOutputType = {
    postId: bigint | null
    userId: bigint | null
    postViews: bigint | null
    postLikes: bigint | null
  }

  export type PostsMinAggregateOutputType = {
    postId: bigint | null
    userId: bigint | null
    postTitle: string | null
    postContent: string | null
    imagePath: string | null
    publishDate: Date | null
    tag: string | null
    postViews: bigint | null
    postLikes: bigint | null
  }

  export type PostsMaxAggregateOutputType = {
    postId: bigint | null
    userId: bigint | null
    postTitle: string | null
    postContent: string | null
    imagePath: string | null
    publishDate: Date | null
    tag: string | null
    postViews: bigint | null
    postLikes: bigint | null
  }

  export type PostsCountAggregateOutputType = {
    postId: number
    userId: number
    postTitle: number
    postContent: number
    imagePath: number
    publishDate: number
    tag: number
    postViews: number
    postLikes: number
    _all: number
  }


  export type PostsAvgAggregateInputType = {
    postId?: true
    userId?: true
    postViews?: true
    postLikes?: true
  }

  export type PostsSumAggregateInputType = {
    postId?: true
    userId?: true
    postViews?: true
    postLikes?: true
  }

  export type PostsMinAggregateInputType = {
    postId?: true
    userId?: true
    postTitle?: true
    postContent?: true
    imagePath?: true
    publishDate?: true
    tag?: true
    postViews?: true
    postLikes?: true
  }

  export type PostsMaxAggregateInputType = {
    postId?: true
    userId?: true
    postTitle?: true
    postContent?: true
    imagePath?: true
    publishDate?: true
    tag?: true
    postViews?: true
    postLikes?: true
  }

  export type PostsCountAggregateInputType = {
    postId?: true
    userId?: true
    postTitle?: true
    postContent?: true
    imagePath?: true
    publishDate?: true
    tag?: true
    postViews?: true
    postLikes?: true
    _all?: true
  }

  export type PostsAggregateArgs = {
    /**
     * Filter which Posts to aggregate.
     */
    where?: PostsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: Enumerable<PostsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostsMaxAggregateInputType
  }

  export type GetPostsAggregateType<T extends PostsAggregateArgs> = {
        [P in keyof T & keyof AggregatePosts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePosts[P]>
      : GetScalarType<T[P], AggregatePosts[P]>
  }




  export type PostsGroupByArgs = {
    where?: PostsWhereInput
    orderBy?: Enumerable<PostsOrderByWithAggregationInput>
    by: PostsScalarFieldEnum[]
    having?: PostsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostsCountAggregateInputType | true
    _avg?: PostsAvgAggregateInputType
    _sum?: PostsSumAggregateInputType
    _min?: PostsMinAggregateInputType
    _max?: PostsMaxAggregateInputType
  }


  export type PostsGroupByOutputType = {
    postId: bigint
    userId: bigint
    postTitle: string | null
    postContent: string
    imagePath: string | null
    publishDate: Date
    tag: string
    postViews: bigint
    postLikes: bigint
    _count: PostsCountAggregateOutputType | null
    _avg: PostsAvgAggregateOutputType | null
    _sum: PostsSumAggregateOutputType | null
    _min: PostsMinAggregateOutputType | null
    _max: PostsMaxAggregateOutputType | null
  }

  type GetPostsGroupByPayload<T extends PostsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PostsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostsGroupByOutputType[P]>
            : GetScalarType<T[P], PostsGroupByOutputType[P]>
        }
      >
    >


  export type PostsSelect = {
    postId?: boolean
    userId?: boolean
    postTitle?: boolean
    postContent?: boolean
    imagePath?: boolean
    publishDate?: boolean
    tag?: boolean
    postViews?: boolean
    postLikes?: boolean
  }


  export type PostsGetPayload<S extends boolean | null | undefined | PostsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Posts :
    S extends undefined ? never :
    S extends { include: any } & (PostsArgs | PostsFindManyArgs)
    ? Posts 
    : S extends { select: any } & (PostsArgs | PostsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Posts ? Posts[P] : never
  } 
      : Posts


  type PostsCountArgs = 
    Omit<PostsFindManyArgs, 'select' | 'include'> & {
      select?: PostsCountAggregateInputType | true
    }

  export interface PostsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Posts that matches the filter.
     * @param {PostsFindUniqueArgs} args - Arguments to find a Posts
     * @example
     * // Get one Posts
     * const posts = await prisma.posts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PostsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PostsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Posts'> extends True ? Prisma__PostsClient<PostsGetPayload<T>> : Prisma__PostsClient<PostsGetPayload<T> | null, null>

    /**
     * Find one Posts that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PostsFindUniqueOrThrowArgs} args - Arguments to find a Posts
     * @example
     * // Get one Posts
     * const posts = await prisma.posts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PostsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PostsFindUniqueOrThrowArgs>
    ): Prisma__PostsClient<PostsGetPayload<T>>

    /**
     * Find the first Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostsFindFirstArgs} args - Arguments to find a Posts
     * @example
     * // Get one Posts
     * const posts = await prisma.posts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PostsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PostsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Posts'> extends True ? Prisma__PostsClient<PostsGetPayload<T>> : Prisma__PostsClient<PostsGetPayload<T> | null, null>

    /**
     * Find the first Posts that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostsFindFirstOrThrowArgs} args - Arguments to find a Posts
     * @example
     * // Get one Posts
     * const posts = await prisma.posts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PostsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PostsFindFirstOrThrowArgs>
    ): Prisma__PostsClient<PostsGetPayload<T>>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.posts.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.posts.findMany({ take: 10 })
     * 
     * // Only select the `postId`
     * const postsWithPostIdOnly = await prisma.posts.findMany({ select: { postId: true } })
     * 
    **/
    findMany<T extends PostsFindManyArgs>(
      args?: SelectSubset<T, PostsFindManyArgs>
    ): PrismaPromise<Array<PostsGetPayload<T>>>

    /**
     * Create a Posts.
     * @param {PostsCreateArgs} args - Arguments to create a Posts.
     * @example
     * // Create one Posts
     * const Posts = await prisma.posts.create({
     *   data: {
     *     // ... data to create a Posts
     *   }
     * })
     * 
    **/
    create<T extends PostsCreateArgs>(
      args: SelectSubset<T, PostsCreateArgs>
    ): Prisma__PostsClient<PostsGetPayload<T>>

    /**
     * Create many Posts.
     *     @param {PostsCreateManyArgs} args - Arguments to create many Posts.
     *     @example
     *     // Create many Posts
     *     const posts = await prisma.posts.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PostsCreateManyArgs>(
      args?: SelectSubset<T, PostsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Posts.
     * @param {PostsDeleteArgs} args - Arguments to delete one Posts.
     * @example
     * // Delete one Posts
     * const Posts = await prisma.posts.delete({
     *   where: {
     *     // ... filter to delete one Posts
     *   }
     * })
     * 
    **/
    delete<T extends PostsDeleteArgs>(
      args: SelectSubset<T, PostsDeleteArgs>
    ): Prisma__PostsClient<PostsGetPayload<T>>

    /**
     * Update one Posts.
     * @param {PostsUpdateArgs} args - Arguments to update one Posts.
     * @example
     * // Update one Posts
     * const posts = await prisma.posts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PostsUpdateArgs>(
      args: SelectSubset<T, PostsUpdateArgs>
    ): Prisma__PostsClient<PostsGetPayload<T>>

    /**
     * Delete zero or more Posts.
     * @param {PostsDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.posts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PostsDeleteManyArgs>(
      args?: SelectSubset<T, PostsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const posts = await prisma.posts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PostsUpdateManyArgs>(
      args: SelectSubset<T, PostsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Posts.
     * @param {PostsUpsertArgs} args - Arguments to update or create a Posts.
     * @example
     * // Update or create a Posts
     * const posts = await prisma.posts.upsert({
     *   create: {
     *     // ... data to create a Posts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Posts we want to update
     *   }
     * })
    **/
    upsert<T extends PostsUpsertArgs>(
      args: SelectSubset<T, PostsUpsertArgs>
    ): Prisma__PostsClient<PostsGetPayload<T>>

    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostsCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.posts.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostsCountArgs>(
      args?: Subset<T, PostsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostsAggregateArgs>(args: Subset<T, PostsAggregateArgs>): PrismaPromise<GetPostsAggregateType<T>>

    /**
     * Group by Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostsGroupByArgs['orderBy'] }
        : { orderBy?: PostsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Posts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PostsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Posts base type for findUnique actions
   */
  export type PostsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Posts
     */
    select?: PostsSelect | null
    /**
     * Filter, which Posts to fetch.
     */
    where: PostsWhereUniqueInput
  }

  /**
   * Posts findUnique
   */
  export interface PostsFindUniqueArgs extends PostsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Posts findUniqueOrThrow
   */
  export type PostsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Posts
     */
    select?: PostsSelect | null
    /**
     * Filter, which Posts to fetch.
     */
    where: PostsWhereUniqueInput
  }


  /**
   * Posts base type for findFirst actions
   */
  export type PostsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Posts
     */
    select?: PostsSelect | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: Enumerable<PostsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: Enumerable<PostsScalarFieldEnum>
  }

  /**
   * Posts findFirst
   */
  export interface PostsFindFirstArgs extends PostsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Posts findFirstOrThrow
   */
  export type PostsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Posts
     */
    select?: PostsSelect | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: Enumerable<PostsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: Enumerable<PostsScalarFieldEnum>
  }


  /**
   * Posts findMany
   */
  export type PostsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Posts
     */
    select?: PostsSelect | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: Enumerable<PostsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     */
    cursor?: PostsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    distinct?: Enumerable<PostsScalarFieldEnum>
  }


  /**
   * Posts create
   */
  export type PostsCreateArgs = {
    /**
     * Select specific fields to fetch from the Posts
     */
    select?: PostsSelect | null
    /**
     * The data needed to create a Posts.
     */
    data: XOR<PostsCreateInput, PostsUncheckedCreateInput>
  }


  /**
   * Posts createMany
   */
  export type PostsCreateManyArgs = {
    /**
     * The data used to create many Posts.
     */
    data: Enumerable<PostsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Posts update
   */
  export type PostsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Posts
     */
    select?: PostsSelect | null
    /**
     * The data needed to update a Posts.
     */
    data: XOR<PostsUpdateInput, PostsUncheckedUpdateInput>
    /**
     * Choose, which Posts to update.
     */
    where: PostsWhereUniqueInput
  }


  /**
   * Posts updateMany
   */
  export type PostsUpdateManyArgs = {
    /**
     * The data used to update Posts.
     */
    data: XOR<PostsUpdateManyMutationInput, PostsUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostsWhereInput
  }


  /**
   * Posts upsert
   */
  export type PostsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Posts
     */
    select?: PostsSelect | null
    /**
     * The filter to search for the Posts to update in case it exists.
     */
    where: PostsWhereUniqueInput
    /**
     * In case the Posts found by the `where` argument doesn't exist, create a new Posts with this data.
     */
    create: XOR<PostsCreateInput, PostsUncheckedCreateInput>
    /**
     * In case the Posts was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostsUpdateInput, PostsUncheckedUpdateInput>
  }


  /**
   * Posts delete
   */
  export type PostsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Posts
     */
    select?: PostsSelect | null
    /**
     * Filter which Posts to delete.
     */
    where: PostsWhereUniqueInput
  }


  /**
   * Posts deleteMany
   */
  export type PostsDeleteManyArgs = {
    /**
     * Filter which Posts to delete
     */
    where?: PostsWhereInput
  }


  /**
   * Posts without action
   */
  export type PostsArgs = {
    /**
     * Select specific fields to fetch from the Posts
     */
    select?: PostsSelect | null
  }



  /**
<<<<<<< HEAD
   * Model PostInterest
   */


  export type AggregatePostInterest = {
    _count: PostInterestCountAggregateOutputType | null
    _avg: PostInterestAvgAggregateOutputType | null
    _sum: PostInterestSumAggregateOutputType | null
    _min: PostInterestMinAggregateOutputType | null
    _max: PostInterestMaxAggregateOutputType | null
  }

  export type PostInterestAvgAggregateOutputType = {
    collectId: number | null
    userId: number | null
    postId: number | null
  }

  export type PostInterestSumAggregateOutputType = {
    collectId: bigint | null
    userId: bigint | null
    postId: bigint | null
  }

  export type PostInterestMinAggregateOutputType = {
    collectId: bigint | null
    userId: bigint | null
    postId: bigint | null
  }

  export type PostInterestMaxAggregateOutputType = {
    collectId: bigint | null
    userId: bigint | null
    postId: bigint | null
  }

  export type PostInterestCountAggregateOutputType = {
    collectId: number
    userId: number
    postId: number
=======
   * Model Activity
   */


  export type AggregateActivity = {
    _count: ActivityCountAggregateOutputType | null
    _avg: ActivityAvgAggregateOutputType | null
    _sum: ActivitySumAggregateOutputType | null
    _min: ActivityMinAggregateOutputType | null
    _max: ActivityMaxAggregateOutputType | null
  }

  export type ActivityAvgAggregateOutputType = {
    activityId: number | null
    userId: number | null
  }

  export type ActivitySumAggregateOutputType = {
    activityId: bigint | null
    userId: bigint | null
  }

  export type ActivityMinAggregateOutputType = {
    activityId: bigint | null
    userId: bigint | null
    activityName: string | null
    activityPeriod: string | null
    certification: boolean | null
  }

  export type ActivityMaxAggregateOutputType = {
    activityId: bigint | null
    userId: bigint | null
    activityName: string | null
    activityPeriod: string | null
    certification: boolean | null
  }

  export type ActivityCountAggregateOutputType = {
    activityId: number
    userId: number
    activityName: number
    activityPeriod: number
    certification: number
>>>>>>> feature/10
    _all: number
  }


<<<<<<< HEAD
  export type PostInterestAvgAggregateInputType = {
    collectId?: true
    userId?: true
    postId?: true
  }

  export type PostInterestSumAggregateInputType = {
    collectId?: true
    userId?: true
    postId?: true
  }

  export type PostInterestMinAggregateInputType = {
    collectId?: true
    userId?: true
    postId?: true
  }

  export type PostInterestMaxAggregateInputType = {
    collectId?: true
    userId?: true
    postId?: true
  }

  export type PostInterestCountAggregateInputType = {
    collectId?: true
    userId?: true
    postId?: true
    _all?: true
  }

  export type PostInterestAggregateArgs = {
    /**
     * Filter which PostInterest to aggregate.
     */
    where?: PostInterestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostInterests to fetch.
     */
    orderBy?: Enumerable<PostInterestOrderByWithRelationInput>
=======
  export type ActivityAvgAggregateInputType = {
    activityId?: true
    userId?: true
  }

  export type ActivitySumAggregateInputType = {
    activityId?: true
    userId?: true
  }

  export type ActivityMinAggregateInputType = {
    activityId?: true
    userId?: true
    activityName?: true
    activityPeriod?: true
    certification?: true
  }

  export type ActivityMaxAggregateInputType = {
    activityId?: true
    userId?: true
    activityName?: true
    activityPeriod?: true
    certification?: true
  }

  export type ActivityCountAggregateInputType = {
    activityId?: true
    userId?: true
    activityName?: true
    activityPeriod?: true
    certification?: true
    _all?: true
  }

  export type ActivityAggregateArgs = {
    /**
     * Filter which Activity to aggregate.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: Enumerable<ActivityOrderByWithRelationInput>
>>>>>>> feature/10
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
<<<<<<< HEAD
    cursor?: PostInterestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostInterests from the position of the cursor.
=======
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
>>>>>>> feature/10
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
<<<<<<< HEAD
     * Skip the first `n` PostInterests.
=======
     * Skip the first `n` Activities.
>>>>>>> feature/10
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
<<<<<<< HEAD
     * Count returned PostInterests
    **/
    _count?: true | PostInterestCountAggregateInputType
=======
     * Count returned Activities
    **/
    _count?: true | ActivityCountAggregateInputType
>>>>>>> feature/10
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
<<<<<<< HEAD
    _avg?: PostInterestAvgAggregateInputType
=======
    _avg?: ActivityAvgAggregateInputType
>>>>>>> feature/10
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
<<<<<<< HEAD
    _sum?: PostInterestSumAggregateInputType
=======
    _sum?: ActivitySumAggregateInputType
>>>>>>> feature/10
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
<<<<<<< HEAD
    _min?: PostInterestMinAggregateInputType
=======
    _min?: ActivityMinAggregateInputType
>>>>>>> feature/10
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
<<<<<<< HEAD
    _max?: PostInterestMaxAggregateInputType
  }

  export type GetPostInterestAggregateType<T extends PostInterestAggregateArgs> = {
        [P in keyof T & keyof AggregatePostInterest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostInterest[P]>
      : GetScalarType<T[P], AggregatePostInterest[P]>
=======
    _max?: ActivityMaxAggregateInputType
  }

  export type GetActivityAggregateType<T extends ActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivity[P]>
      : GetScalarType<T[P], AggregateActivity[P]>
>>>>>>> feature/10
  }




<<<<<<< HEAD
  export type PostInterestGroupByArgs = {
    where?: PostInterestWhereInput
    orderBy?: Enumerable<PostInterestOrderByWithAggregationInput>
    by: PostInterestScalarFieldEnum[]
    having?: PostInterestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostInterestCountAggregateInputType | true
    _avg?: PostInterestAvgAggregateInputType
    _sum?: PostInterestSumAggregateInputType
    _min?: PostInterestMinAggregateInputType
    _max?: PostInterestMaxAggregateInputType
  }


  export type PostInterestGroupByOutputType = {
    collectId: bigint
    userId: bigint
    postId: bigint
    _count: PostInterestCountAggregateOutputType | null
    _avg: PostInterestAvgAggregateOutputType | null
    _sum: PostInterestSumAggregateOutputType | null
    _min: PostInterestMinAggregateOutputType | null
    _max: PostInterestMaxAggregateOutputType | null
  }

  type GetPostInterestGroupByPayload<T extends PostInterestGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PostInterestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostInterestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostInterestGroupByOutputType[P]>
            : GetScalarType<T[P], PostInterestGroupByOutputType[P]>
=======
  export type ActivityGroupByArgs = {
    where?: ActivityWhereInput
    orderBy?: Enumerable<ActivityOrderByWithAggregationInput>
    by: ActivityScalarFieldEnum[]
    having?: ActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityCountAggregateInputType | true
    _avg?: ActivityAvgAggregateInputType
    _sum?: ActivitySumAggregateInputType
    _min?: ActivityMinAggregateInputType
    _max?: ActivityMaxAggregateInputType
  }


  export type ActivityGroupByOutputType = {
    activityId: bigint
    userId: bigint
    activityName: string | null
    activityPeriod: string | null
    certification: boolean
    _count: ActivityCountAggregateOutputType | null
    _avg: ActivityAvgAggregateOutputType | null
    _sum: ActivitySumAggregateOutputType | null
    _min: ActivityMinAggregateOutputType | null
    _max: ActivityMaxAggregateOutputType | null
  }

  type GetActivityGroupByPayload<T extends ActivityGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityGroupByOutputType[P]>
>>>>>>> feature/10
        }
      >
    >


<<<<<<< HEAD
  export type PostInterestSelect = {
    collectId?: boolean
    userId?: boolean
    postId?: boolean
  }


  export type PostInterestGetPayload<S extends boolean | null | undefined | PostInterestArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PostInterest :
    S extends undefined ? never :
    S extends { include: any } & (PostInterestArgs | PostInterestFindManyArgs)
    ? PostInterest 
    : S extends { select: any } & (PostInterestArgs | PostInterestFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof PostInterest ? PostInterest[P] : never
  } 
      : PostInterest


  type PostInterestCountArgs = 
    Omit<PostInterestFindManyArgs, 'select' | 'include'> & {
      select?: PostInterestCountAggregateInputType | true
    }

  export interface PostInterestDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one PostInterest that matches the filter.
     * @param {PostInterestFindUniqueArgs} args - Arguments to find a PostInterest
     * @example
     * // Get one PostInterest
     * const postInterest = await prisma.postInterest.findUnique({
=======
  export type ActivitySelect = {
    activityId?: boolean
    userId?: boolean
    activityName?: boolean
    activityPeriod?: boolean
    certification?: boolean
  }


  export type ActivityGetPayload<S extends boolean | null | undefined | ActivityArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Activity :
    S extends undefined ? never :
    S extends { include: any } & (ActivityArgs | ActivityFindManyArgs)
    ? Activity 
    : S extends { select: any } & (ActivityArgs | ActivityFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Activity ? Activity[P] : never
  } 
      : Activity


  type ActivityCountArgs = 
    Omit<ActivityFindManyArgs, 'select' | 'include'> & {
      select?: ActivityCountAggregateInputType | true
    }

  export interface ActivityDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Activity that matches the filter.
     * @param {ActivityFindUniqueArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUnique({
>>>>>>> feature/10
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
<<<<<<< HEAD
    findUnique<T extends PostInterestFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PostInterestFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PostInterest'> extends True ? Prisma__PostInterestClient<PostInterestGetPayload<T>> : Prisma__PostInterestClient<PostInterestGetPayload<T> | null, null>

    /**
     * Find one PostInterest that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PostInterestFindUniqueOrThrowArgs} args - Arguments to find a PostInterest
     * @example
     * // Get one PostInterest
     * const postInterest = await prisma.postInterest.findUniqueOrThrow({
=======
    findUnique<T extends ActivityFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ActivityFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Activity'> extends True ? Prisma__ActivityClient<ActivityGetPayload<T>> : Prisma__ActivityClient<ActivityGetPayload<T> | null, null>

    /**
     * Find one Activity that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ActivityFindUniqueOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUniqueOrThrow({
>>>>>>> feature/10
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
<<<<<<< HEAD
    findUniqueOrThrow<T extends PostInterestFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PostInterestFindUniqueOrThrowArgs>
    ): Prisma__PostInterestClient<PostInterestGetPayload<T>>

    /**
     * Find the first PostInterest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostInterestFindFirstArgs} args - Arguments to find a PostInterest
     * @example
     * // Get one PostInterest
     * const postInterest = await prisma.postInterest.findFirst({
=======
    findUniqueOrThrow<T extends ActivityFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ActivityFindUniqueOrThrowArgs>
    ): Prisma__ActivityClient<ActivityGetPayload<T>>

    /**
     * Find the first Activity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindFirstArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirst({
>>>>>>> feature/10
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
<<<<<<< HEAD
    findFirst<T extends PostInterestFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PostInterestFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PostInterest'> extends True ? Prisma__PostInterestClient<PostInterestGetPayload<T>> : Prisma__PostInterestClient<PostInterestGetPayload<T> | null, null>

    /**
     * Find the first PostInterest that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostInterestFindFirstOrThrowArgs} args - Arguments to find a PostInterest
     * @example
     * // Get one PostInterest
     * const postInterest = await prisma.postInterest.findFirstOrThrow({
=======
    findFirst<T extends ActivityFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ActivityFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Activity'> extends True ? Prisma__ActivityClient<ActivityGetPayload<T>> : Prisma__ActivityClient<ActivityGetPayload<T> | null, null>

    /**
     * Find the first Activity that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindFirstOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirstOrThrow({
>>>>>>> feature/10
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
<<<<<<< HEAD
    findFirstOrThrow<T extends PostInterestFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PostInterestFindFirstOrThrowArgs>
    ): Prisma__PostInterestClient<PostInterestGetPayload<T>>

    /**
     * Find zero or more PostInterests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostInterestFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PostInterests
     * const postInterests = await prisma.postInterest.findMany()
     * 
     * // Get first 10 PostInterests
     * const postInterests = await prisma.postInterest.findMany({ take: 10 })
     * 
     * // Only select the `collectId`
     * const postInterestWithCollectIdOnly = await prisma.postInterest.findMany({ select: { collectId: true } })
     * 
    **/
    findMany<T extends PostInterestFindManyArgs>(
      args?: SelectSubset<T, PostInterestFindManyArgs>
    ): PrismaPromise<Array<PostInterestGetPayload<T>>>

    /**
     * Create a PostInterest.
     * @param {PostInterestCreateArgs} args - Arguments to create a PostInterest.
     * @example
     * // Create one PostInterest
     * const PostInterest = await prisma.postInterest.create({
     *   data: {
     *     // ... data to create a PostInterest
=======
    findFirstOrThrow<T extends ActivityFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ActivityFindFirstOrThrowArgs>
    ): Prisma__ActivityClient<ActivityGetPayload<T>>

    /**
     * Find zero or more Activities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Activities
     * const activities = await prisma.activity.findMany()
     * 
     * // Get first 10 Activities
     * const activities = await prisma.activity.findMany({ take: 10 })
     * 
     * // Only select the `activityId`
     * const activityWithActivityIdOnly = await prisma.activity.findMany({ select: { activityId: true } })
     * 
    **/
    findMany<T extends ActivityFindManyArgs>(
      args?: SelectSubset<T, ActivityFindManyArgs>
    ): PrismaPromise<Array<ActivityGetPayload<T>>>

    /**
     * Create a Activity.
     * @param {ActivityCreateArgs} args - Arguments to create a Activity.
     * @example
     * // Create one Activity
     * const Activity = await prisma.activity.create({
     *   data: {
     *     // ... data to create a Activity
>>>>>>> feature/10
     *   }
     * })
     * 
    **/
<<<<<<< HEAD
    create<T extends PostInterestCreateArgs>(
      args: SelectSubset<T, PostInterestCreateArgs>
    ): Prisma__PostInterestClient<PostInterestGetPayload<T>>

    /**
     * Create many PostInterests.
     *     @param {PostInterestCreateManyArgs} args - Arguments to create many PostInterests.
     *     @example
     *     // Create many PostInterests
     *     const postInterest = await prisma.postInterest.createMany({
=======
    create<T extends ActivityCreateArgs>(
      args: SelectSubset<T, ActivityCreateArgs>
    ): Prisma__ActivityClient<ActivityGetPayload<T>>

    /**
     * Create many Activities.
     *     @param {ActivityCreateManyArgs} args - Arguments to create many Activities.
     *     @example
     *     // Create many Activities
     *     const activity = await prisma.activity.createMany({
>>>>>>> feature/10
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
<<<<<<< HEAD
    createMany<T extends PostInterestCreateManyArgs>(
      args?: SelectSubset<T, PostInterestCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a PostInterest.
     * @param {PostInterestDeleteArgs} args - Arguments to delete one PostInterest.
     * @example
     * // Delete one PostInterest
     * const PostInterest = await prisma.postInterest.delete({
     *   where: {
     *     // ... filter to delete one PostInterest
=======
    createMany<T extends ActivityCreateManyArgs>(
      args?: SelectSubset<T, ActivityCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Activity.
     * @param {ActivityDeleteArgs} args - Arguments to delete one Activity.
     * @example
     * // Delete one Activity
     * const Activity = await prisma.activity.delete({
     *   where: {
     *     // ... filter to delete one Activity
>>>>>>> feature/10
     *   }
     * })
     * 
    **/
<<<<<<< HEAD
    delete<T extends PostInterestDeleteArgs>(
      args: SelectSubset<T, PostInterestDeleteArgs>
    ): Prisma__PostInterestClient<PostInterestGetPayload<T>>

    /**
     * Update one PostInterest.
     * @param {PostInterestUpdateArgs} args - Arguments to update one PostInterest.
     * @example
     * // Update one PostInterest
     * const postInterest = await prisma.postInterest.update({
=======
    delete<T extends ActivityDeleteArgs>(
      args: SelectSubset<T, ActivityDeleteArgs>
    ): Prisma__ActivityClient<ActivityGetPayload<T>>

    /**
     * Update one Activity.
     * @param {ActivityUpdateArgs} args - Arguments to update one Activity.
     * @example
     * // Update one Activity
     * const activity = await prisma.activity.update({
>>>>>>> feature/10
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
<<<<<<< HEAD
    update<T extends PostInterestUpdateArgs>(
      args: SelectSubset<T, PostInterestUpdateArgs>
    ): Prisma__PostInterestClient<PostInterestGetPayload<T>>

    /**
     * Delete zero or more PostInterests.
     * @param {PostInterestDeleteManyArgs} args - Arguments to filter PostInterests to delete.
     * @example
     * // Delete a few PostInterests
     * const { count } = await prisma.postInterest.deleteMany({
=======
    update<T extends ActivityUpdateArgs>(
      args: SelectSubset<T, ActivityUpdateArgs>
    ): Prisma__ActivityClient<ActivityGetPayload<T>>

    /**
     * Delete zero or more Activities.
     * @param {ActivityDeleteManyArgs} args - Arguments to filter Activities to delete.
     * @example
     * // Delete a few Activities
     * const { count } = await prisma.activity.deleteMany({
>>>>>>> feature/10
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
<<<<<<< HEAD
    deleteMany<T extends PostInterestDeleteManyArgs>(
      args?: SelectSubset<T, PostInterestDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostInterests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostInterestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PostInterests
     * const postInterest = await prisma.postInterest.updateMany({
=======
    deleteMany<T extends ActivityDeleteManyArgs>(
      args?: SelectSubset<T, ActivityDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Activities
     * const activity = await prisma.activity.updateMany({
>>>>>>> feature/10
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
<<<<<<< HEAD
    updateMany<T extends PostInterestUpdateManyArgs>(
      args: SelectSubset<T, PostInterestUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one PostInterest.
     * @param {PostInterestUpsertArgs} args - Arguments to update or create a PostInterest.
     * @example
     * // Update or create a PostInterest
     * const postInterest = await prisma.postInterest.upsert({
     *   create: {
     *     // ... data to create a PostInterest
=======
    updateMany<T extends ActivityUpdateManyArgs>(
      args: SelectSubset<T, ActivityUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Activity.
     * @param {ActivityUpsertArgs} args - Arguments to update or create a Activity.
     * @example
     * // Update or create a Activity
     * const activity = await prisma.activity.upsert({
     *   create: {
     *     // ... data to create a Activity
>>>>>>> feature/10
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
<<<<<<< HEAD
     *     // ... the filter for the PostInterest we want to update
     *   }
     * })
    **/
    upsert<T extends PostInterestUpsertArgs>(
      args: SelectSubset<T, PostInterestUpsertArgs>
    ): Prisma__PostInterestClient<PostInterestGetPayload<T>>

    /**
     * Count the number of PostInterests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostInterestCountArgs} args - Arguments to filter PostInterests to count.
     * @example
     * // Count the number of PostInterests
     * const count = await prisma.postInterest.count({
     *   where: {
     *     // ... the filter for the PostInterests we want to count
     *   }
     * })
    **/
    count<T extends PostInterestCountArgs>(
      args?: Subset<T, PostInterestCountArgs>,
=======
     *     // ... the filter for the Activity we want to update
     *   }
     * })
    **/
    upsert<T extends ActivityUpsertArgs>(
      args: SelectSubset<T, ActivityUpsertArgs>
    ): Prisma__ActivityClient<ActivityGetPayload<T>>

    /**
     * Count the number of Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCountArgs} args - Arguments to filter Activities to count.
     * @example
     * // Count the number of Activities
     * const count = await prisma.activity.count({
     *   where: {
     *     // ... the filter for the Activities we want to count
     *   }
     * })
    **/
    count<T extends ActivityCountArgs>(
      args?: Subset<T, ActivityCountArgs>,
>>>>>>> feature/10
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
<<<<<<< HEAD
          : GetScalarType<T['select'], PostInterestCountAggregateOutputType>
=======
          : GetScalarType<T['select'], ActivityCountAggregateOutputType>
>>>>>>> feature/10
        : number
    >

    /**
<<<<<<< HEAD
     * Allows you to perform aggregations operations on a PostInterest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostInterestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
=======
     * Allows you to perform aggregations operations on a Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
>>>>>>> feature/10
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
<<<<<<< HEAD
    aggregate<T extends PostInterestAggregateArgs>(args: Subset<T, PostInterestAggregateArgs>): PrismaPromise<GetPostInterestAggregateType<T>>

    /**
     * Group by PostInterest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostInterestGroupByArgs} args - Group by arguments.
=======
    aggregate<T extends ActivityAggregateArgs>(args: Subset<T, ActivityAggregateArgs>): PrismaPromise<GetActivityAggregateType<T>>

    /**
     * Group by Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityGroupByArgs} args - Group by arguments.
>>>>>>> feature/10
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
<<<<<<< HEAD
      T extends PostInterestGroupByArgs,
=======
      T extends ActivityGroupByArgs,
>>>>>>> feature/10
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
<<<<<<< HEAD
        ? { orderBy: PostInterestGroupByArgs['orderBy'] }
        : { orderBy?: PostInterestGroupByArgs['orderBy'] },
=======
        ? { orderBy: ActivityGroupByArgs['orderBy'] }
        : { orderBy?: ActivityGroupByArgs['orderBy'] },
>>>>>>> feature/10
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
<<<<<<< HEAD
    >(args: SubsetIntersection<T, PostInterestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostInterestGroupByPayload<T> : PrismaPromise<InputErrors>
=======
    >(args: SubsetIntersection<T, ActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityGroupByPayload<T> : PrismaPromise<InputErrors>
>>>>>>> feature/10

  }

  /**
<<<<<<< HEAD
   * The delegate class that acts as a "Promise-like" for PostInterest.
=======
   * The delegate class that acts as a "Promise-like" for Activity.
>>>>>>> feature/10
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
<<<<<<< HEAD
  export class Prisma__PostInterestClient<T, Null = never> implements PrismaPromise<T> {
=======
  export class Prisma__ActivityClient<T, Null = never> implements PrismaPromise<T> {
>>>>>>> feature/10
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
<<<<<<< HEAD
   * PostInterest base type for findUnique actions
   */
  export type PostInterestFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the PostInterest
     */
    select?: PostInterestSelect | null
    /**
     * Filter, which PostInterest to fetch.
     */
    where: PostInterestWhereUniqueInput
  }

  /**
   * PostInterest findUnique
   */
  export interface PostInterestFindUniqueArgs extends PostInterestFindUniqueArgsBase {
=======
   * Activity base type for findUnique actions
   */
  export type ActivityFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect | null
    /**
     * Filter, which Activity to fetch.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity findUnique
   */
  export interface ActivityFindUniqueArgs extends ActivityFindUniqueArgsBase {
>>>>>>> feature/10
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
<<<<<<< HEAD
   * PostInterest findUniqueOrThrow
   */
  export type PostInterestFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the PostInterest
     */
    select?: PostInterestSelect | null
    /**
     * Filter, which PostInterest to fetch.
     */
    where: PostInterestWhereUniqueInput
=======
   * Activity findUniqueOrThrow
   */
  export type ActivityFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect | null
    /**
     * Filter, which Activity to fetch.
     */
    where: ActivityWhereUniqueInput
>>>>>>> feature/10
  }


  /**
<<<<<<< HEAD
   * PostInterest base type for findFirst actions
   */
  export type PostInterestFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the PostInterest
     */
    select?: PostInterestSelect | null
    /**
     * Filter, which PostInterest to fetch.
     */
    where?: PostInterestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostInterests to fetch.
     */
    orderBy?: Enumerable<PostInterestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostInterests.
     */
    cursor?: PostInterestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostInterests from the position of the cursor.
=======
   * Activity base type for findFirst actions
   */
  export type ActivityFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect | null
    /**
     * Filter, which Activity to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: Enumerable<ActivityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
>>>>>>> feature/10
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
<<<<<<< HEAD
     * Skip the first `n` PostInterests.
=======
     * Skip the first `n` Activities.
>>>>>>> feature/10
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
<<<<<<< HEAD
     * Filter by unique combinations of PostInterests.
     */
    distinct?: Enumerable<PostInterestScalarFieldEnum>
  }

  /**
   * PostInterest findFirst
   */
  export interface PostInterestFindFirstArgs extends PostInterestFindFirstArgsBase {
=======
     * Filter by unique combinations of Activities.
     */
    distinct?: Enumerable<ActivityScalarFieldEnum>
  }

  /**
   * Activity findFirst
   */
  export interface ActivityFindFirstArgs extends ActivityFindFirstArgsBase {
>>>>>>> feature/10
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
<<<<<<< HEAD
   * PostInterest findFirstOrThrow
   */
  export type PostInterestFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the PostInterest
     */
    select?: PostInterestSelect | null
    /**
     * Filter, which PostInterest to fetch.
     */
    where?: PostInterestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostInterests to fetch.
     */
    orderBy?: Enumerable<PostInterestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostInterests.
     */
    cursor?: PostInterestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostInterests from the position of the cursor.
=======
   * Activity findFirstOrThrow
   */
  export type ActivityFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect | null
    /**
     * Filter, which Activity to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: Enumerable<ActivityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
>>>>>>> feature/10
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
<<<<<<< HEAD
     * Skip the first `n` PostInterests.
=======
     * Skip the first `n` Activities.
>>>>>>> feature/10
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
<<<<<<< HEAD
     * Filter by unique combinations of PostInterests.
     */
    distinct?: Enumerable<PostInterestScalarFieldEnum>
=======
     * Filter by unique combinations of Activities.
     */
    distinct?: Enumerable<ActivityScalarFieldEnum>
>>>>>>> feature/10
  }


  /**
<<<<<<< HEAD
   * PostInterest findMany
   */
  export type PostInterestFindManyArgs = {
    /**
     * Select specific fields to fetch from the PostInterest
     */
    select?: PostInterestSelect | null
    /**
     * Filter, which PostInterests to fetch.
     */
    where?: PostInterestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostInterests to fetch.
     */
    orderBy?: Enumerable<PostInterestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PostInterests.
     */
    cursor?: PostInterestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostInterests from the position of the cursor.
=======
   * Activity findMany
   */
  export type ActivityFindManyArgs = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect | null
    /**
     * Filter, which Activities to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: Enumerable<ActivityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
>>>>>>> feature/10
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
<<<<<<< HEAD
     * Skip the first `n` PostInterests.
     */
    skip?: number
    distinct?: Enumerable<PostInterestScalarFieldEnum>
=======
     * Skip the first `n` Activities.
     */
    skip?: number
    distinct?: Enumerable<ActivityScalarFieldEnum>
>>>>>>> feature/10
  }


  /**
<<<<<<< HEAD
   * PostInterest create
   */
  export type PostInterestCreateArgs = {
    /**
     * Select specific fields to fetch from the PostInterest
     */
    select?: PostInterestSelect | null
    /**
     * The data needed to create a PostInterest.
     */
    data: XOR<PostInterestCreateInput, PostInterestUncheckedCreateInput>
=======
   * Activity create
   */
  export type ActivityCreateArgs = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect | null
    /**
     * The data needed to create a Activity.
     */
    data: XOR<ActivityCreateInput, ActivityUncheckedCreateInput>
>>>>>>> feature/10
  }


  /**
<<<<<<< HEAD
   * PostInterest createMany
   */
  export type PostInterestCreateManyArgs = {
    /**
     * The data used to create many PostInterests.
     */
    data: Enumerable<PostInterestCreateManyInput>
=======
   * Activity createMany
   */
  export type ActivityCreateManyArgs = {
    /**
     * The data used to create many Activities.
     */
    data: Enumerable<ActivityCreateManyInput>
>>>>>>> feature/10
    skipDuplicates?: boolean
  }


  /**
<<<<<<< HEAD
   * PostInterest update
   */
  export type PostInterestUpdateArgs = {
    /**
     * Select specific fields to fetch from the PostInterest
     */
    select?: PostInterestSelect | null
    /**
     * The data needed to update a PostInterest.
     */
    data: XOR<PostInterestUpdateInput, PostInterestUncheckedUpdateInput>
    /**
     * Choose, which PostInterest to update.
     */
    where: PostInterestWhereUniqueInput
=======
   * Activity update
   */
  export type ActivityUpdateArgs = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect | null
    /**
     * The data needed to update a Activity.
     */
    data: XOR<ActivityUpdateInput, ActivityUncheckedUpdateInput>
    /**
     * Choose, which Activity to update.
     */
    where: ActivityWhereUniqueInput
>>>>>>> feature/10
  }


  /**
<<<<<<< HEAD
   * PostInterest updateMany
   */
  export type PostInterestUpdateManyArgs = {
    /**
     * The data used to update PostInterests.
     */
    data: XOR<PostInterestUpdateManyMutationInput, PostInterestUncheckedUpdateManyInput>
    /**
     * Filter which PostInterests to update
     */
    where?: PostInterestWhereInput
=======
   * Activity updateMany
   */
  export type ActivityUpdateManyArgs = {
    /**
     * The data used to update Activities.
     */
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyInput>
    /**
     * Filter which Activities to update
     */
    where?: ActivityWhereInput
>>>>>>> feature/10
  }


  /**
<<<<<<< HEAD
   * PostInterest upsert
   */
  export type PostInterestUpsertArgs = {
    /**
     * Select specific fields to fetch from the PostInterest
     */
    select?: PostInterestSelect | null
    /**
     * The filter to search for the PostInterest to update in case it exists.
     */
    where: PostInterestWhereUniqueInput
    /**
     * In case the PostInterest found by the `where` argument doesn't exist, create a new PostInterest with this data.
     */
    create: XOR<PostInterestCreateInput, PostInterestUncheckedCreateInput>
    /**
     * In case the PostInterest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostInterestUpdateInput, PostInterestUncheckedUpdateInput>
=======
   * Activity upsert
   */
  export type ActivityUpsertArgs = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect | null
    /**
     * The filter to search for the Activity to update in case it exists.
     */
    where: ActivityWhereUniqueInput
    /**
     * In case the Activity found by the `where` argument doesn't exist, create a new Activity with this data.
     */
    create: XOR<ActivityCreateInput, ActivityUncheckedCreateInput>
    /**
     * In case the Activity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityUpdateInput, ActivityUncheckedUpdateInput>
>>>>>>> feature/10
  }


  /**
<<<<<<< HEAD
   * PostInterest delete
   */
  export type PostInterestDeleteArgs = {
    /**
     * Select specific fields to fetch from the PostInterest
     */
    select?: PostInterestSelect | null
    /**
     * Filter which PostInterest to delete.
     */
    where: PostInterestWhereUniqueInput
=======
   * Activity delete
   */
  export type ActivityDeleteArgs = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect | null
    /**
     * Filter which Activity to delete.
     */
    where: ActivityWhereUniqueInput
>>>>>>> feature/10
  }


  /**
<<<<<<< HEAD
   * PostInterest deleteMany
   */
  export type PostInterestDeleteManyArgs = {
    /**
     * Filter which PostInterests to delete
     */
    where?: PostInterestWhereInput
=======
   * Activity deleteMany
   */
  export type ActivityDeleteManyArgs = {
    /**
     * Filter which Activities to delete
     */
    where?: ActivityWhereInput
>>>>>>> feature/10
  }


  /**
<<<<<<< HEAD
   * PostInterest without action
   */
  export type PostInterestArgs = {
    /**
     * Select specific fields to fetch from the PostInterest
     */
    select?: PostInterestSelect | null
=======
   * Activity without action
   */
  export type ActivityArgs = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect | null
>>>>>>> feature/10
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

<<<<<<< HEAD
  export const PostInterestScalarFieldEnum: {
    collectId: 'collectId',
    userId: 'userId',
    postId: 'postId'
  };

  export type PostInterestScalarFieldEnum = (typeof PostInterestScalarFieldEnum)[keyof typeof PostInterestScalarFieldEnum]
=======
  export const ActivityScalarFieldEnum: {
    activityId: 'activityId',
    userId: 'userId',
    activityName: 'activityName',
    activityPeriod: 'activityPeriod',
    certification: 'certification'
  };

  export type ActivityScalarFieldEnum = (typeof ActivityScalarFieldEnum)[keyof typeof ActivityScalarFieldEnum]
>>>>>>> feature/10


  export const PostsScalarFieldEnum: {
    postId: 'postId',
    userId: 'userId',
    postTitle: 'postTitle',
    postContent: 'postContent',
    imagePath: 'imagePath',
    publishDate: 'publishDate',
    tag: 'tag',
    postViews: 'postViews',
    postLikes: 'postLikes'
  };

  export type PostsScalarFieldEnum = (typeof PostsScalarFieldEnum)[keyof typeof PostsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    userId: 'userId',
    userName: 'userName',
    department: 'department',
    userNick: 'userNick',
    userEmail: 'userEmail',
    userPW: 'userPW',
    userPhoneNum: 'userPhoneNum',
    profileImagePath: 'profileImagePath',
    userRole: 'userRole',
    activityNum: 'activityNum',
    serviceAgree: 'serviceAgree',
    regDate: 'regDate',
    update: 'update',
    pointStatus: 'pointStatus'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: Enumerable<UsersWhereInput>
    OR?: Enumerable<UsersWhereInput>
    NOT?: Enumerable<UsersWhereInput>
    userId?: BigIntFilter | bigint | number
    userName?: StringFilter | string
    department?: StringFilter | string
    userNick?: StringNullableFilter | string | null
    userEmail?: StringFilter | string
    userPW?: StringFilter | string
    userPhoneNum?: StringFilter | string
    profileImagePath?: StringNullableFilter | string | null
    userRole?: BoolFilter | boolean
    activityNum?: BigIntNullableFilter | bigint | number | null
    serviceAgree?: BoolFilter | boolean
    regDate?: DateTimeFilter | Date | string
    update?: DateTimeFilter | Date | string
    pointStatus?: BigIntNullableFilter | bigint | number | null
  }

  export type UsersOrderByWithRelationInput = {
    userId?: SortOrder
    userName?: SortOrder
    department?: SortOrder
    userNick?: SortOrder
    userEmail?: SortOrder
    userPW?: SortOrder
    userPhoneNum?: SortOrder
    profileImagePath?: SortOrder
    userRole?: SortOrder
    activityNum?: SortOrder
    serviceAgree?: SortOrder
    regDate?: SortOrder
    update?: SortOrder
    pointStatus?: SortOrder
  }

  export type UsersWhereUniqueInput = {
    userId?: bigint | number
    userEmail?: string
  }

  export type UsersOrderByWithAggregationInput = {
    userId?: SortOrder
    userName?: SortOrder
    department?: SortOrder
    userNick?: SortOrder
    userEmail?: SortOrder
    userPW?: SortOrder
    userPhoneNum?: SortOrder
    profileImagePath?: SortOrder
    userRole?: SortOrder
    activityNum?: SortOrder
    serviceAgree?: SortOrder
    regDate?: SortOrder
    update?: SortOrder
    pointStatus?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UsersScalarWhereWithAggregatesInput>
    OR?: Enumerable<UsersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UsersScalarWhereWithAggregatesInput>
    userId?: BigIntWithAggregatesFilter | bigint | number
    userName?: StringWithAggregatesFilter | string
    department?: StringWithAggregatesFilter | string
    userNick?: StringNullableWithAggregatesFilter | string | null
    userEmail?: StringWithAggregatesFilter | string
    userPW?: StringWithAggregatesFilter | string
    userPhoneNum?: StringWithAggregatesFilter | string
    profileImagePath?: StringNullableWithAggregatesFilter | string | null
    userRole?: BoolWithAggregatesFilter | boolean
    activityNum?: BigIntNullableWithAggregatesFilter | bigint | number | null
    serviceAgree?: BoolWithAggregatesFilter | boolean
    regDate?: DateTimeWithAggregatesFilter | Date | string
    update?: DateTimeWithAggregatesFilter | Date | string
    pointStatus?: BigIntNullableWithAggregatesFilter | bigint | number | null
  }

  export type PostsWhereInput = {
    AND?: Enumerable<PostsWhereInput>
    OR?: Enumerable<PostsWhereInput>
    NOT?: Enumerable<PostsWhereInput>
    postId?: BigIntFilter | bigint | number
    userId?: BigIntFilter | bigint | number
    postTitle?: StringNullableFilter | string | null
    postContent?: StringFilter | string
    imagePath?: StringNullableFilter | string | null
    publishDate?: DateTimeFilter | Date | string
    tag?: StringFilter | string
    postViews?: BigIntFilter | bigint | number
    postLikes?: BigIntFilter | bigint | number
  }

  export type PostsOrderByWithRelationInput = {
    postId?: SortOrder
    userId?: SortOrder
    postTitle?: SortOrder
    postContent?: SortOrder
    imagePath?: SortOrder
    publishDate?: SortOrder
    tag?: SortOrder
    postViews?: SortOrder
    postLikes?: SortOrder
  }

  export type PostsWhereUniqueInput = {
    postId?: bigint | number
  }

  export type PostsOrderByWithAggregationInput = {
    postId?: SortOrder
    userId?: SortOrder
    postTitle?: SortOrder
    postContent?: SortOrder
    imagePath?: SortOrder
    publishDate?: SortOrder
    tag?: SortOrder
    postViews?: SortOrder
    postLikes?: SortOrder
    _count?: PostsCountOrderByAggregateInput
    _avg?: PostsAvgOrderByAggregateInput
    _max?: PostsMaxOrderByAggregateInput
    _min?: PostsMinOrderByAggregateInput
    _sum?: PostsSumOrderByAggregateInput
  }

  export type PostsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PostsScalarWhereWithAggregatesInput>
    OR?: Enumerable<PostsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PostsScalarWhereWithAggregatesInput>
    postId?: BigIntWithAggregatesFilter | bigint | number
    userId?: BigIntWithAggregatesFilter | bigint | number
    postTitle?: StringNullableWithAggregatesFilter | string | null
    postContent?: StringWithAggregatesFilter | string
    imagePath?: StringNullableWithAggregatesFilter | string | null
    publishDate?: DateTimeWithAggregatesFilter | Date | string
    tag?: StringWithAggregatesFilter | string
    postViews?: BigIntWithAggregatesFilter | bigint | number
    postLikes?: BigIntWithAggregatesFilter | bigint | number
  }

<<<<<<< HEAD
  export type PostInterestWhereInput = {
    AND?: Enumerable<PostInterestWhereInput>
    OR?: Enumerable<PostInterestWhereInput>
    NOT?: Enumerable<PostInterestWhereInput>
    collectId?: BigIntFilter | bigint | number
    userId?: BigIntFilter | bigint | number
    postId?: BigIntFilter | bigint | number
  }

  export type PostInterestOrderByWithRelationInput = {
    collectId?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
  }

  export type PostInterestWhereUniqueInput = {
    collectId?: bigint | number
  }

  export type PostInterestOrderByWithAggregationInput = {
    collectId?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    _count?: PostInterestCountOrderByAggregateInput
    _avg?: PostInterestAvgOrderByAggregateInput
    _max?: PostInterestMaxOrderByAggregateInput
    _min?: PostInterestMinOrderByAggregateInput
    _sum?: PostInterestSumOrderByAggregateInput
  }

  export type PostInterestScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PostInterestScalarWhereWithAggregatesInput>
    OR?: Enumerable<PostInterestScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PostInterestScalarWhereWithAggregatesInput>
    collectId?: BigIntWithAggregatesFilter | bigint | number
    userId?: BigIntWithAggregatesFilter | bigint | number
    postId?: BigIntWithAggregatesFilter | bigint | number
=======
  export type ActivityWhereInput = {
    AND?: Enumerable<ActivityWhereInput>
    OR?: Enumerable<ActivityWhereInput>
    NOT?: Enumerable<ActivityWhereInput>
    activityId?: BigIntFilter | bigint | number
    userId?: BigIntFilter | bigint | number
    activityName?: StringNullableFilter | string | null
    activityPeriod?: StringNullableFilter | string | null
    certification?: BoolFilter | boolean
  }

  export type ActivityOrderByWithRelationInput = {
    activityId?: SortOrder
    userId?: SortOrder
    activityName?: SortOrder
    activityPeriod?: SortOrder
    certification?: SortOrder
  }

  export type ActivityWhereUniqueInput = {
    activityId?: bigint | number
  }

  export type ActivityOrderByWithAggregationInput = {
    activityId?: SortOrder
    userId?: SortOrder
    activityName?: SortOrder
    activityPeriod?: SortOrder
    certification?: SortOrder
    _count?: ActivityCountOrderByAggregateInput
    _avg?: ActivityAvgOrderByAggregateInput
    _max?: ActivityMaxOrderByAggregateInput
    _min?: ActivityMinOrderByAggregateInput
    _sum?: ActivitySumOrderByAggregateInput
  }

  export type ActivityScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ActivityScalarWhereWithAggregatesInput>
    OR?: Enumerable<ActivityScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ActivityScalarWhereWithAggregatesInput>
    activityId?: BigIntWithAggregatesFilter | bigint | number
    userId?: BigIntWithAggregatesFilter | bigint | number
    activityName?: StringNullableWithAggregatesFilter | string | null
    activityPeriod?: StringNullableWithAggregatesFilter | string | null
    certification?: BoolWithAggregatesFilter | boolean
>>>>>>> feature/10
  }

  export type UsersCreateInput = {
    userId?: bigint | number
    userName: string
    department: string
    userNick?: string | null
    userEmail: string
    userPW: string
    userPhoneNum: string
    profileImagePath?: string | null
    userRole: boolean
    activityNum?: bigint | number | null
    serviceAgree: boolean
    regDate?: Date | string
    update?: Date | string
    pointStatus?: bigint | number | null
  }

  export type UsersUncheckedCreateInput = {
    userId?: bigint | number
    userName: string
    department: string
    userNick?: string | null
    userEmail: string
    userPW: string
    userPhoneNum: string
    profileImagePath?: string | null
    userRole: boolean
    activityNum?: bigint | number | null
    serviceAgree: boolean
    regDate?: Date | string
    update?: Date | string
    pointStatus?: bigint | number | null
  }

  export type UsersUpdateInput = {
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    userNick?: NullableStringFieldUpdateOperationsInput | string | null
    userEmail?: StringFieldUpdateOperationsInput | string
    userPW?: StringFieldUpdateOperationsInput | string
    userPhoneNum?: StringFieldUpdateOperationsInput | string
    profileImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    userRole?: BoolFieldUpdateOperationsInput | boolean
    activityNum?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    serviceAgree?: BoolFieldUpdateOperationsInput | boolean
    regDate?: DateTimeFieldUpdateOperationsInput | Date | string
    update?: DateTimeFieldUpdateOperationsInput | Date | string
    pointStatus?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type UsersUncheckedUpdateInput = {
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    userNick?: NullableStringFieldUpdateOperationsInput | string | null
    userEmail?: StringFieldUpdateOperationsInput | string
    userPW?: StringFieldUpdateOperationsInput | string
    userPhoneNum?: StringFieldUpdateOperationsInput | string
    profileImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    userRole?: BoolFieldUpdateOperationsInput | boolean
    activityNum?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    serviceAgree?: BoolFieldUpdateOperationsInput | boolean
    regDate?: DateTimeFieldUpdateOperationsInput | Date | string
    update?: DateTimeFieldUpdateOperationsInput | Date | string
    pointStatus?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type UsersCreateManyInput = {
    userId?: bigint | number
    userName: string
    department: string
    userNick?: string | null
    userEmail: string
    userPW: string
    userPhoneNum: string
    profileImagePath?: string | null
    userRole: boolean
    activityNum?: bigint | number | null
    serviceAgree: boolean
    regDate?: Date | string
    update?: Date | string
    pointStatus?: bigint | number | null
  }

  export type UsersUpdateManyMutationInput = {
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    userNick?: NullableStringFieldUpdateOperationsInput | string | null
    userEmail?: StringFieldUpdateOperationsInput | string
    userPW?: StringFieldUpdateOperationsInput | string
    userPhoneNum?: StringFieldUpdateOperationsInput | string
    profileImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    userRole?: BoolFieldUpdateOperationsInput | boolean
    activityNum?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    serviceAgree?: BoolFieldUpdateOperationsInput | boolean
    regDate?: DateTimeFieldUpdateOperationsInput | Date | string
    update?: DateTimeFieldUpdateOperationsInput | Date | string
    pointStatus?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type UsersUncheckedUpdateManyInput = {
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    userName?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    userNick?: NullableStringFieldUpdateOperationsInput | string | null
    userEmail?: StringFieldUpdateOperationsInput | string
    userPW?: StringFieldUpdateOperationsInput | string
    userPhoneNum?: StringFieldUpdateOperationsInput | string
    profileImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    userRole?: BoolFieldUpdateOperationsInput | boolean
    activityNum?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    serviceAgree?: BoolFieldUpdateOperationsInput | boolean
    regDate?: DateTimeFieldUpdateOperationsInput | Date | string
    update?: DateTimeFieldUpdateOperationsInput | Date | string
    pointStatus?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type PostsCreateInput = {
    postId?: bigint | number
    userId: bigint | number
    postTitle?: string | null
    postContent: string
    imagePath?: string | null
    publishDate?: Date | string
    tag: string
    postViews: bigint | number
    postLikes: bigint | number
  }

  export type PostsUncheckedCreateInput = {
    postId?: bigint | number
    userId: bigint | number
    postTitle?: string | null
    postContent: string
    imagePath?: string | null
    publishDate?: Date | string
    tag: string
    postViews: bigint | number
    postLikes: bigint | number
  }

  export type PostsUpdateInput = {
    postId?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    postTitle?: NullableStringFieldUpdateOperationsInput | string | null
    postContent?: StringFieldUpdateOperationsInput | string
    imagePath?: NullableStringFieldUpdateOperationsInput | string | null
    publishDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tag?: StringFieldUpdateOperationsInput | string
    postViews?: BigIntFieldUpdateOperationsInput | bigint | number
    postLikes?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type PostsUncheckedUpdateInput = {
    postId?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    postTitle?: NullableStringFieldUpdateOperationsInput | string | null
    postContent?: StringFieldUpdateOperationsInput | string
    imagePath?: NullableStringFieldUpdateOperationsInput | string | null
    publishDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tag?: StringFieldUpdateOperationsInput | string
    postViews?: BigIntFieldUpdateOperationsInput | bigint | number
    postLikes?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type PostsCreateManyInput = {
    postId?: bigint | number
    userId: bigint | number
    postTitle?: string | null
    postContent: string
    imagePath?: string | null
    publishDate?: Date | string
    tag: string
    postViews: bigint | number
    postLikes: bigint | number
  }

  export type PostsUpdateManyMutationInput = {
    postId?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    postTitle?: NullableStringFieldUpdateOperationsInput | string | null
    postContent?: StringFieldUpdateOperationsInput | string
    imagePath?: NullableStringFieldUpdateOperationsInput | string | null
    publishDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tag?: StringFieldUpdateOperationsInput | string
    postViews?: BigIntFieldUpdateOperationsInput | bigint | number
    postLikes?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type PostsUncheckedUpdateManyInput = {
    postId?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    postTitle?: NullableStringFieldUpdateOperationsInput | string | null
    postContent?: StringFieldUpdateOperationsInput | string
    imagePath?: NullableStringFieldUpdateOperationsInput | string | null
    publishDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tag?: StringFieldUpdateOperationsInput | string
    postViews?: BigIntFieldUpdateOperationsInput | bigint | number
    postLikes?: BigIntFieldUpdateOperationsInput | bigint | number
  }

<<<<<<< HEAD
  export type PostInterestCreateInput = {
    collectId?: bigint | number
    userId: bigint | number
    postId: bigint | number
  }

  export type PostInterestUncheckedCreateInput = {
    collectId?: bigint | number
    userId: bigint | number
    postId: bigint | number
  }

  export type PostInterestUpdateInput = {
    collectId?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    postId?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type PostInterestUncheckedUpdateInput = {
    collectId?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    postId?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type PostInterestCreateManyInput = {
    collectId?: bigint | number
    userId: bigint | number
    postId: bigint | number
  }

  export type PostInterestUpdateManyMutationInput = {
    collectId?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    postId?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type PostInterestUncheckedUpdateManyInput = {
    collectId?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    postId?: BigIntFieldUpdateOperationsInput | bigint | number
=======
  export type ActivityCreateInput = {
    activityId?: bigint | number
    userId: bigint | number
    activityName?: string | null
    activityPeriod?: string | null
    certification: boolean
  }

  export type ActivityUncheckedCreateInput = {
    activityId?: bigint | number
    userId: bigint | number
    activityName?: string | null
    activityPeriod?: string | null
    certification: boolean
  }

  export type ActivityUpdateInput = {
    activityId?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    activityName?: NullableStringFieldUpdateOperationsInput | string | null
    activityPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    certification?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ActivityUncheckedUpdateInput = {
    activityId?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    activityName?: NullableStringFieldUpdateOperationsInput | string | null
    activityPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    certification?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ActivityCreateManyInput = {
    activityId?: bigint | number
    userId: bigint | number
    activityName?: string | null
    activityPeriod?: string | null
    certification: boolean
  }

  export type ActivityUpdateManyMutationInput = {
    activityId?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    activityName?: NullableStringFieldUpdateOperationsInput | string | null
    activityPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    certification?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ActivityUncheckedUpdateManyInput = {
    activityId?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    activityName?: NullableStringFieldUpdateOperationsInput | string | null
    activityPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    certification?: BoolFieldUpdateOperationsInput | boolean
>>>>>>> feature/10
  }

  export type BigIntFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntFilter | bigint | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type BigIntNullableFilter = {
    equals?: bigint | number | null
    in?: Enumerable<bigint> | Enumerable<number> | null
    notIn?: Enumerable<bigint> | Enumerable<number> | null
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntNullableFilter | bigint | number | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type UsersCountOrderByAggregateInput = {
    userId?: SortOrder
    userName?: SortOrder
    department?: SortOrder
    userNick?: SortOrder
    userEmail?: SortOrder
    userPW?: SortOrder
    userPhoneNum?: SortOrder
    profileImagePath?: SortOrder
    userRole?: SortOrder
    activityNum?: SortOrder
    serviceAgree?: SortOrder
    regDate?: SortOrder
    update?: SortOrder
    pointStatus?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    userId?: SortOrder
    activityNum?: SortOrder
    pointStatus?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    userId?: SortOrder
    userName?: SortOrder
    department?: SortOrder
    userNick?: SortOrder
    userEmail?: SortOrder
    userPW?: SortOrder
    userPhoneNum?: SortOrder
    profileImagePath?: SortOrder
    userRole?: SortOrder
    activityNum?: SortOrder
    serviceAgree?: SortOrder
    regDate?: SortOrder
    update?: SortOrder
    pointStatus?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    userId?: SortOrder
    userName?: SortOrder
    department?: SortOrder
    userNick?: SortOrder
    userEmail?: SortOrder
    userPW?: SortOrder
    userPhoneNum?: SortOrder
    profileImagePath?: SortOrder
    userRole?: SortOrder
    activityNum?: SortOrder
    serviceAgree?: SortOrder
    regDate?: SortOrder
    update?: SortOrder
    pointStatus?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    userId?: SortOrder
    activityNum?: SortOrder
    pointStatus?: SortOrder
  }

  export type BigIntWithAggregatesFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntWithAggregatesFilter | bigint | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedBigIntFilter
    _min?: NestedBigIntFilter
    _max?: NestedBigIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type BigIntNullableWithAggregatesFilter = {
    equals?: bigint | number | null
    in?: Enumerable<bigint> | Enumerable<number> | null
    notIn?: Enumerable<bigint> | Enumerable<number> | null
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntNullableWithAggregatesFilter | bigint | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedBigIntNullableFilter
    _min?: NestedBigIntNullableFilter
    _max?: NestedBigIntNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type PostsCountOrderByAggregateInput = {
    postId?: SortOrder
    userId?: SortOrder
    postTitle?: SortOrder
    postContent?: SortOrder
    imagePath?: SortOrder
    publishDate?: SortOrder
    tag?: SortOrder
    postViews?: SortOrder
    postLikes?: SortOrder
  }

  export type PostsAvgOrderByAggregateInput = {
    postId?: SortOrder
    userId?: SortOrder
    postViews?: SortOrder
    postLikes?: SortOrder
  }

  export type PostsMaxOrderByAggregateInput = {
    postId?: SortOrder
    userId?: SortOrder
    postTitle?: SortOrder
    postContent?: SortOrder
    imagePath?: SortOrder
    publishDate?: SortOrder
    tag?: SortOrder
    postViews?: SortOrder
    postLikes?: SortOrder
  }

  export type PostsMinOrderByAggregateInput = {
    postId?: SortOrder
    userId?: SortOrder
    postTitle?: SortOrder
    postContent?: SortOrder
    imagePath?: SortOrder
    publishDate?: SortOrder
    tag?: SortOrder
    postViews?: SortOrder
    postLikes?: SortOrder
  }

  export type PostsSumOrderByAggregateInput = {
    postId?: SortOrder
    userId?: SortOrder
    postViews?: SortOrder
    postLikes?: SortOrder
  }

<<<<<<< HEAD
  export type PostInterestCountOrderByAggregateInput = {
    collectId?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
  }

  export type PostInterestAvgOrderByAggregateInput = {
    collectId?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
  }

  export type PostInterestMaxOrderByAggregateInput = {
    collectId?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
  }

  export type PostInterestMinOrderByAggregateInput = {
    collectId?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
  }

  export type PostInterestSumOrderByAggregateInput = {
    collectId?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
=======
  export type ActivityCountOrderByAggregateInput = {
    activityId?: SortOrder
    userId?: SortOrder
    activityName?: SortOrder
    activityPeriod?: SortOrder
    certification?: SortOrder
  }

  export type ActivityAvgOrderByAggregateInput = {
    activityId?: SortOrder
    userId?: SortOrder
  }

  export type ActivityMaxOrderByAggregateInput = {
    activityId?: SortOrder
    userId?: SortOrder
    activityName?: SortOrder
    activityPeriod?: SortOrder
    certification?: SortOrder
  }

  export type ActivityMinOrderByAggregateInput = {
    activityId?: SortOrder
    userId?: SortOrder
    activityName?: SortOrder
    activityPeriod?: SortOrder
    certification?: SortOrder
  }

  export type ActivitySumOrderByAggregateInput = {
    activityId?: SortOrder
    userId?: SortOrder
>>>>>>> feature/10
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NestedBigIntFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntFilter | bigint | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBigIntNullableFilter = {
    equals?: bigint | number | null
    in?: Enumerable<bigint> | Enumerable<number> | null
    notIn?: Enumerable<bigint> | Enumerable<number> | null
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntNullableFilter | bigint | number | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedBigIntWithAggregatesFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntWithAggregatesFilter | bigint | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedBigIntFilter
    _min?: NestedBigIntFilter
    _max?: NestedBigIntFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedBigIntNullableWithAggregatesFilter = {
    equals?: bigint | number | null
    in?: Enumerable<bigint> | Enumerable<number> | null
    notIn?: Enumerable<bigint> | Enumerable<number> | null
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntNullableWithAggregatesFilter | bigint | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedBigIntNullableFilter
    _min?: NestedBigIntNullableFilter
    _max?: NestedBigIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}